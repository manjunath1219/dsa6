+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 1**

A permutation perm of n + 1 integers of all the integers in the range [0, n] can be represented as a string s of length n where:

- s[i] == 'I' if perm[i] < perm[i + 1], and
- s[i] == 'D' if perm[i] > perm[i + 1].

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return **any of them**.

**Example 1:**

**Input:** s = "IDID"

**Output:**

[0,4,1,3,2]
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize an empty list perm to store the reconstructed permutation.
(*)Initialize two variables: start with 0 and end with the length of s.
(*)Iterate over each character ch in s.
If ch is 'I', append the value of start to perm and increment start by 1.
If ch is 'D', append the value of end to perm and decrement end by 1.
(*)After the iteration, append the value of start (or end since they will be the same) to perm as the last element.
(*)Return the reconstructed permutation perm.
----


+*In[1]:*+
[source, ipython3]
----
def findPermutation(s):
    n = len(s)
    perm = []
    start, end = 0, n

    for ch in s:
        if ch == 'I':
            perm.append(start)
            start += 1
        elif ch == 'D':
            perm.append(end)
            end -= 1

    # Append the last element
    perm.append(start)

    return perm
s = "IDID"
print(findPermutation(s))
----


+*Out[1]:*+
----
[0, 4, 1, 3, 2]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 2**

You are given an m x n integer matrix matrix with the following two properties:

- Each row is sorted in non-decreasing order.
- The first integer of each row is greater than the last integer of the previous row.

Given an integer target, return true *if* target *is in* matrix *or* false *otherwise*.

You must write a solution in O(log(m * n)) time complexity.

**Example 1:**

**Input:** matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3

**Output:** true
----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize two variables, start and end, to represent the start and end indices of the flattened array.
start is initialized to 0, and end is initialized to m * n - 1, where m is the number of rows and n is the number of columns in 
the matrix.
(*)Perform a binary search while start <= end:
Calculate the mid index as mid = (start + end) // 2.
Convert the mid index to the corresponding row and column indices as row = mid // n and col = mid % n.
(*)Compare the element at the matrix[row][col] with the target:
If matrix[row][col] == target, return True.
If matrix[row][col] < target, update start = mid + 1.
If matrix[row][col] > target, update end = mid - 1.
If the loop completes without finding the target, return False.
----


+*In[2]:*+
[source, ipython3]
----
def searchMatrix(matrix, target):
    m, n = len(matrix), len(matrix[0])
    start, end = 0, m * n - 1

    while start <= end:
        mid = (start + end) // 2
        row, col = mid // n, mid % n

        if matrix[row][col] == target:
            return True
        elif matrix[row][col] < target:
            start = mid + 1
        else:
            end = mid - 1

    return False
matrix = [[1, 3, 5, 7], [10, 11, 16, 20], [23, 30, 34, 60]]
target = 3

print(searchMatrix(matrix, target))
----


+*Out[2]:*+
----
True
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 3**

Given an array of integers arr, return *true if and only if it is a valid mountain array*.

Recall that arr is a mountain array if and only if:

- arr.length >= 3
- There exists some i with 0 < i < arr.length - 1 such that:
    - arr[0] < arr[1] < ... < arr[i - 1] < arr[i]
    - arr[i] > arr[i + 1] > ... > arr[arr.length - 1]
**Example 1:**

**Input:** arr = [2,1]

**Output:**

false
----


+*In[ ]:*+
[source, ipython3]
----
(*)The length of the array arr must be greater than or equal to 3. If it is less than 3, return False.
(*)Find the index i such that arr[i] is the peak of the mountain.
Start from index 1 and iterate until i < len(arr) - 1 or arr[i] > arr[i + 1].
If we reach the end of the array without finding a peak, return False.
(*)Check if all elements before the peak are in strictly increasing order.
Iterate from index 0 to i - 1 and check if arr[j] < arr[j + 1] for all j.
If any element violates the increasing order condition, return False.
(*)Check if all elements after the peak are in strictly decreasing order.
(*)Iterate from index i to len(arr) - 2 and check if arr[j] > arr[j + 1] for all j.
If any element violates the decreasing order condition, return False.
(*)If all conditions are satisfied, return True.
----


+*In[3]:*+
[source, ipython3]
----
def validMountainArray(arr):
    n = len(arr)
    
    if n < 3:
        return False

    i = 1
    while i < n - 1 and arr[i] > arr[i - 1]:
        i += 1
    
    if i == 1 or i == n - 1:
        return False

    while i < n - 1 and arr[i] > arr[i + 1]:
        i += 1

    return i == n - 1
arr = [2, 1]
print(validMountainArray(arr))
----


+*Out[3]:*+
----
False
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 4**

Given a binary array nums, return *the maximum length of a contiguous subarray with an equal number of* 0 *and* 1.

**Example 1:**

**Input:** nums = [0,1]

**Output:** 2

**Explanation:**

[0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

----


+*In[ ]:*+
[source, ipython3]
----
(*)Initialize a variable max_length to store the maximum length of the subarray.
Initialize a variable count to keep track of the running sum.
(*)Create a dictionary sum_counts to store the count of each running sum encountered and its corresponding index.
(*)Set an initial entry sum_counts[0] = -1 to handle the case when the entire array is a valid subarray.
Iterate through the binary array nums:
(*)For each element num, update the count variable:
If num is 0, decrement count by 1.
If num is 1, increment count by 1.
Check if the current count exists in sum_counts:
If it exists, calculate the length of the subarray by subtracting the current index from the stored index in sum_counts for 
that count value.
(*)Update max_length if the calculated length is greater.
Otherwise, store the current count in sum_counts with its corresponding index.
(*)Return max_length.
----


+*In[4]:*+
[source, ipython3]
----
def findMaxLength(nums):
    max_length = 0
    count = 0
    sum_counts = {0: -1}

    for i, num in enumerate(nums):
        if num == 0:
            count -= 1
        else:
            count += 1

        if count in sum_counts:
            length = i - sum_counts[count]
            max_length = max(max_length, length)
        else:
            sum_counts[count] = i

    return max_length
nums = [0, 1]
print(findMaxLength(nums))
----


+*Out[4]:*+
----
2
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
ðŸ’¡ **Question 5**

The **product sum** of two equal-length arrays a and b is equal to the sum of a[i] * b[i] for all 0 <= i < a.length (**0-indexed**).

- For example, if a = [1,2,3,4] and b = [5,2,3,1], the **product sum** would be 1*5 + 2*2 + 3*3 + 4*1 = 22.

Given two arrays nums1 and nums2 of length n, return *the **minimum product sum** if you are allowed to **rearrange** the **order** of the elements in* nums1.

**Example 1:**

**Input:** nums1 = [5,3,4,2], nums2 = [4,2,2,5]

**Output:** 40

**Explanation:**

We can rearrange nums1 to become [3,5,4,2]. The product sum of [3,5,4,2] and [4,2,2,5] is 3*4 + 5*2 + 4*2 + 2*5 = 40.

----


+*In[ ]:*+
[source, ipython3]
----
(*)Sort both arrays, nums1 and nums2, in non-decreasing order.
(*)Initialize a variable min_product_sum to store the minimum product sum.
(*)Iterate over the sorted arrays, multiplying the corresponding elements and adding them to min_product_sum.
(*)Return the value of min_product_sum.
----


+*In[5]:*+
[source, ipython3]
----
def minProductSum(nums1, nums2):
    nums1.sort()
    nums2.sort(reverse=True)
    min_product_sum = 0

    for i in range(len(nums1)):
        min_product_sum += nums1[i] * nums2[i]

    return min_product_sum
nums1 = [5, 3, 4, 2]
nums2 = [4, 2, 2, 5]
print(minProductSum(nums1, nums2))
----


+*Out[5]:*+
----
40
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 6**

An integer array original is transformed into a **doubled** array changed by appending **twice the value** of every element in original, and then randomly **shuffling** the resulting array.

Given an array changed, return original *if* changed *is a **doubled** array. If* changed *is not a **doubled** array, return an empty array. The elements in* original *may be returned in **any** order*.

**Example 1:**

**Input:** changed = [1,3,4,2,6,8]

**Output:** [1,3,4]

**Explanation:** One possible original array could be [1,3,4]:

- Twice the value of 1 is 1 * 2 = 2.
- Twice the value of 3 is 3 * 2 = 6.
- Twice the value of 4 is 4 * 2 = 8.

Other original arrays could be [4,3,1] or [3,1,4].

</aside>
----


+*In[6]:*+
[source, ipython3]
----
from collections import defaultdict

def findOriginalArray(changed):
    count = defaultdict(int)
    original = []

    for num in changed:
        count[num] += 1

    for num in sorted(count.keys()):
        if count[num] == 0:
            continue

        if count[num*2] < count[num]:
            return []

        count[num*2] -= count[num]

        for _ in range(count[num]):
            original.append(num)

    return original
changed = [1, 3, 4, 2, 6, 8]
print(findOriginalArray(changed))
----


+*Out[6]:*+
----
[1, 3, 4]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ **Question 7**

Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

**Example 1:**

**Input:** n = 3

**Output:** [[1,2,3],[8,9,4],[7,6,5]]
----


+*In[7]:*+
[source, ipython3]
----
def generateMatrix(n):
    result = [[0] * n for _ in range(n)]
    row_start, row_end = 0, n - 1
    col_start, col_end = 0, n - 1
    num = 1

    while num <= n * n:
        for i in range(col_start, col_end + 1):
            result[row_start][i] = num
            num += 1
        row_start += 1

        for i in range(row_start, row_end + 1):
            result[i][col_end] = num
            num += 1
        col_end -= 1

        if row_start <= row_end:
            for i in range(col_end, col_start - 1, -1):
                result[row_end][i] = num
                num += 1
            row_end -= 1

        if col_start <= col_end:
            for i in range(row_end, row_start - 1, -1):
                result[i][col_start] = num
                num += 1
            col_start += 1

    return result
n = 3
print(generateMatrix(n))
----


+*Out[7]:*+
----
[[1, 2, 3], [8, 9, 4], [7, 6, 5]]
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
**Question 8**

Given two [sparse matrices](https://en.wikipedia.org/wiki/Sparse_matrix) mat1 of size m x k and mat2 of size k x n, return the result of mat1 x mat2. You may assume that multiplication is always possible.

**Example 1**

**Input:** mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]

**Output:**

[[7,0,0],[-7,0,3]]
----


+*In[8]:*+
[source, ipython3]
----
def multiply(mat1, mat2):
    m, k, n = len(mat1), len(mat1[0]), len(mat2[0])
    result = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            for k in range(k):
                result[i][j] += mat1[i][k] * mat2[k][j]

    return result
mat1 = [[1, 0, 0], [-1, 0, 3]]
mat2 = [[7, 0, 0], [0, 0, 0], [0, 0, 1]]
print(multiply(mat1, mat2))
----


+*Out[8]:*+
----
[[7, 0, 0], [0, 0, 0]]
----


+*In[ ]:*+
[source, ipython3]
----

----
